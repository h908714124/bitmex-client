plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = "com.github.h908714124"

ext.moduleName = 'net.ninety.bitmex'

compileJava {
    options.encoding = "UTF-8"
    sourceCompatibility = '13'
    targetCompatibility = '13'
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                '--module-path', classpath.asPath,
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.swagger:swagger-annotations:1.5.17'
    implementation 'com.squareup.okhttp:okhttp:2.7.5'
    implementation 'com.squareup.okhttp:logging-interceptor:2.7.5'
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'io.gsonfire:gson-fire:1.8.3'
    implementation 'org.threeten:threetenbp:1.4.0'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0-M1'
    testImplementation 'org.junit.vintage:junit-vintage-engine:5.6.0-M1'
}

jar {
    manifest {
        attributes(
                'Implementation-Version': project.properties['version']
        )
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

javadoc {
    exclude("module-info.java")
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign configurations.archives
}

// https://docs.gradle.org/current/userguide/signing_plugin.html
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            ext."signatory.keyId" = System.getenv('SIGNING_KEY_ID')
            ext."signatory.password" = System.getenv('SIGNING_PASSWORD')
        }
    }
}

// https://central.sonatype.org/pages/gradle.html
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "bitmex-client"
            from components.java

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = 'bitmex-client'
                packaging = 'jar'
                description = 'Generated bitmex client'
                url = 'https://github.com/h908714124/bitmex-client'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'h908714124'
                        name = 'h908714124'
                        email = 'kraftdurchblumen@gmx.de'
                    }
                }
                scm {
                    connection = 'scm:svn:https://github.com/h908714124/bitmex-client.git'
                    developerConnection = 'scm:svn:https://github.com/h908714124/bitmex-client.git'
                    url = 'https://github.com/h908714124/bitmex-client'
                }
            }
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = System.getenv('OSS_USER')
                password = System.getenv('OSS_PASS')
            }
        }
    }
}

/*
uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv('OSS_USER'), password: System.getenv('OSS_PASS'))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv('OSS_USER'), password: System.getenv('OSS_PASS'))
            }

            pom.project {
                name 'bitmex-client'
                packaging 'jar'
                artifactId 'bitmex-client'
                description 'Generated bitmex client'
                url 'https://github.com/h908714124/bitmex-client'

                scm {
                    connection 'scm:svn:https://github.com/h908714124/bitmex-client.git'
                    developerConnection 'scm:svn:https://github.com/h908714124/bitmex-client.git'
                    url 'https://github.com/h908714124/bitmex-client'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id 'h908714124'
                        name 'h908714124'
                        email 'kraftdurchblumen@gmx.de'
                    }
                }
            }
        }
    }
}
*/

